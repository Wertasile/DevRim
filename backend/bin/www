#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var { Server } = require("socket.io");
const client = require("../config/redis");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// ---------------- SOCKET.IO HERE ----------------
const io = new Server(server, {
  pingTimeout: 20000,
  cors: {
    origin: [
      "https://devrim-seven.vercel.app", // production
      "http://localhost:5173",           // local dev frontend
      "http://127.0.0.1:5173"
    ],
    credentials: true,
  },
});

io.on("connection", (socket) => {
  console.log("User connected to socket.io : " + socket.id);

  // ============= USER CONNECTED ==========
  socket.on("setup", (userData) => {
    console.log(userData)
    socket.userId = userData._id;
    socket.join(userData._id);
    console.log("User joined personal room:", userData._id);
    socket.emit("connected");

    client.hSet("online_users", userData._id, Date.now().toString())
    console.log(`ðŸŸ¢ User ${userData._id} is now online`);

    io.emit("userStatusUpdate", { userId: userData._id, status: "online" });

  });

  // ========== USER DISCONNECTED ==========
  socket.on("disconnect", async () => {
    if (socket.userId){
      await client.hDel("online_users", socket.userId);
      console.log(`ðŸ”´ User ${socket.userId} went offline`);
      io.emit("userStatusUpdate", { userId: socket.userId, status: "offline" });
    }
  });

  socket.on("join chat", (room) => {
    socket.join(room);
    console.log("User joined room : " + room);
  });

  socket.on("typing", (room) => socket.in(room).emit("typing"));
  socket.on("stop typing", (room) => socket.in(room).emit("stop typing"));

  socket.on("new message", (newMessageReceived) => {
    var chat = newMessageReceived.chat;

    if (!chat.users) return console.log("chat.users not defined");

    chat.users.forEach((user) => {
      if (user._id == newMessageReceived.sender._id) return;
      socket.in(user._id).emit("message received", newMessageReceived);
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log(`server listening on port: ${port}`)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
